// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Shopify/sarama (interfaces: AsyncProducer)

// Package mock is a generated GoMock package.
package mock

import (
	sarama "github.com/Shopify/sarama"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAsyncProducer is a mock of AsyncProducer interface
type MockAsyncProducer struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncProducerMockRecorder
}

// MockAsyncProducerMockRecorder is the mock recorder for MockAsyncProducer
type MockAsyncProducerMockRecorder struct {
	mock *MockAsyncProducer
}

// NewMockAsyncProducer creates a new mock instance
func NewMockAsyncProducer(ctrl *gomock.Controller) *MockAsyncProducer {
	mock := &MockAsyncProducer{ctrl: ctrl}
	mock.recorder = &MockAsyncProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAsyncProducer) EXPECT() *MockAsyncProducerMockRecorder {
	return m.recorder
}

// AsyncClose mocks base method
func (m *MockAsyncProducer) AsyncClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AsyncClose")
}

// AsyncClose indicates an expected call of AsyncClose
func (mr *MockAsyncProducerMockRecorder) AsyncClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncClose", reflect.TypeOf((*MockAsyncProducer)(nil).AsyncClose))
}

// Close mocks base method
func (m *MockAsyncProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockAsyncProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAsyncProducer)(nil).Close))
}

// Errors mocks base method
func (m *MockAsyncProducer) Errors() <-chan *sarama.ProducerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(<-chan *sarama.ProducerError)
	return ret0
}

// Errors indicates an expected call of Errors
func (mr *MockAsyncProducerMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockAsyncProducer)(nil).Errors))
}

// Input mocks base method
func (m *MockAsyncProducer) Input() chan<- *sarama.ProducerMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input")
	ret0, _ := ret[0].(chan<- *sarama.ProducerMessage)
	return ret0
}

// Input indicates an expected call of Input
func (mr *MockAsyncProducerMockRecorder) Input() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockAsyncProducer)(nil).Input))
}

// Successes mocks base method
func (m *MockAsyncProducer) Successes() <-chan *sarama.ProducerMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Successes")
	ret0, _ := ret[0].(<-chan *sarama.ProducerMessage)
	return ret0
}

// Successes indicates an expected call of Successes
func (mr *MockAsyncProducerMockRecorder) Successes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Successes", reflect.TypeOf((*MockAsyncProducer)(nil).Successes))
}
